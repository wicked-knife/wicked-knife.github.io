(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{182:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"代码拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码拆分")]),t._v(" "),s("p",[t._v("webpack的代码拆分功能可以将打包出的 "),s("code",[t._v("bundle")]),t._v(" 拆分成体积更小的 "),s("code",[t._v("bundle")]),t._v("。")]),t._v(" "),s("p",[t._v("这是代码打包优化的主要手段，运用合理可以极大减少应用加载时间，提升应用性能。")]),t._v(" "),s("p",[t._v("常用的代码分离方法有三种：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("入口起点：使用 entry 配置手动地分离代码。")])]),t._v(" "),s("li",[s("p",[t._v("防止重复：使用 SplitChunksPlugin 去重和分离 chunk。")])]),t._v(" "),s("li",[s("p",[t._v("动态导入：通过模块中的内联函数调用来分离代码。")])])]),t._v(" "),s("h2",{attrs:{id:"入口起点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入口起点","aria-hidden":"true"}},[t._v("#")]),t._v(" 入口起点")]),t._v(" "),s("p",[t._v("这种方式主要通过 entry 手动显示地告诉webpack那些代码要分开打包。")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("webpack.common.js")]),t._v("中作如下配置:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./index.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      moduleA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./moduleA.js'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"防止重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止重复","aria-hidden":"true"}},[t._v("#")]),t._v(" 防止重复")]),t._v(" "),s("p",[t._v("入口起点的方式直观，简单。但是不够灵活，无法实现动态地拆分代码。如果index.js 和 moduleA.js 同时引用一个公共模块，如'lodash'时， webpack会将lodash同时打包进去，这样造成了代码冗余。")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("SplitChunksPlugin")]),t._v("就可以将模块的公用依赖拆分到一个单独的模块中。")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("webpack.common.js")]),t._v("中作如下配置:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    optimization"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      splitChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        chunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样就可以满足以上需求。")]),t._v(" "),s("h2",{attrs:{id:"动态加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态加载","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态加载")]),t._v(" "),s("p",[t._v("使用动态加载的方式分割代码主要使用"),s("code",[t._v("import")]),t._v("语法配合"),s("code",[t._v("magic comment")]),t._v("来是实现。")]),t._v(" "),s("p",[t._v("因为我们的代码使用了babel编译，所以为了让babel识别动态import的语法，需要安装"),s("code",[t._v("@babel/plugin-syntax-dynamic-import")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("npm i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" @babel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plugin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("syntax"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dynamic"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v("\n")])])]),s("p",[s("code",[t._v(".babelrc")]),t._v("配置:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugins"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/plugin-syntax-dynamic-import"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在"),s("code",[t._v("webpack.common.js")]),t._v("中作如下配置:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      chunkFilename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].bundle.js'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("chunkFilename")]),t._v(": 它决定 non-entry chunk(非入口 chunk) 的名称。即通过动态加载拆分的代码块的名称。")]),t._v(" "),s("p",[t._v("这个时候假如我们想动态引入'lodash':")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*webpackChunkName: "lodash"*/')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("　_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you can use lodash as _")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这样即可动态引入lodash。同时因为我们配置了chunkFileName,并且在引入时提供了'webpackChunkName',在打包时lodash就会自动拆分出来，并命名为 'lodash.bundle.js' 。")]),t._v(" "),s("p",[t._v("很多时候我们也有 prefetch 和 preload 模块的需求。")]),t._v(" "),s("p",[t._v("一个常见的场景就是在用户网络空闲时去加载代码。")]),t._v(" "),s("ul",[s("li",[t._v("prefetch(预取)：将来某些导航下可能需要的资源")]),t._v(" "),s("li",[t._v("preload(预加载)：当前导航下可能需要资源")])]),t._v(" "),s("p",[t._v("使用方法：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* webpackPrefetch: true */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./LoginModal.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这会生成 "),s("link",{attrs:{rel:"prefetch",href:"login-modal-chunk.js"}}),t._v(" 并追加到页面头部，指示着浏览器在闲置时间预取 login-modal-chunk.js 文件。")]),t._v(" "),s("p",[t._v("与 prefetch 指令相比，preload 指令有许多不同之处：")]),t._v(" "),s("ul",[s("li",[t._v("preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。")]),t._v(" "),s("li",[t._v("preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。")]),t._v(" "),s("li",[t._v("preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。")]),t._v(" "),s("li",[t._v("浏览器支持程度不同。")])])])}],!1,null,null,null);a.default=e.exports}}]);